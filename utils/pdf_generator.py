import os
from datetime import datetime
from fpdf import FPDF

class SmartTourPDF(FPDF):
    def __init__(self):
        super().__init__()
        self.set_margins(20, 20, 20)
        self.set_auto_page_break(auto=True, margin=20)
    
    def header(self):
        """Üst başlık"""
        try:
            self.set_font("Arial", 'B', 16)
            self.set_text_color(0, 51, 153)
            self.cell(0, 10, "SmartTour Travel Plan", ln=True, align="C")
            self.set_text_color(0, 0, 0)
            self.ln(5)
        except Exception as e:
            print(f"Header error: {e}")

    def footer(self):
        """Alt bilgi"""
        try:
            self.set_y(-15)
            self.set_font("Arial", size=8)
            self.set_text_color(120, 120, 120)
            date_str = datetime.now().strftime("%d %B %Y")
            self.cell(0, 10, f"Generated by SmartTour | {date_str}", align="C")
        except Exception as e:
            print(f"Footer error: {e}")

    def safe_text(self, text):
        """Metni güvenli hale getirir"""
        if text is None:
            return "N/A"
        
        text = str(text)
        text = text.replace('\n', ' ').replace('\r', ' ').replace('\t', ' ')
        
        if len(text) > 1000:
            text = text[:1000] + "..."
        
        if not text.strip():
            return "N/A"
            
        return text.strip()
    
    def add_wrapped_text(self, text, prefix=""):
        """Uzun metinleri otomatik bölerek ekle"""
        text = self.safe_text(text)
        max_width = 80
        
        words = text.split()
        line = prefix
        
        for word in words:
            test_line = line + word + " "
            if len(test_line) > max_width:
                if line.strip():
                    self.cell(0, 6, line.strip(), ln=True)
                line = "   " + word + " "
            else:
                line = test_line
        
        if line.strip():
            self.cell(0, 6, line.strip(), ln=True)


def generate_pdf(data, filename):
    """PDF oluştur"""
    try:
        print("DEBUG - PDF Generation Started")
        print(f"Data type: {type(data)}")
        print(f"Data keys: {data.keys() if isinstance(data, dict) else 'Not a dict'}")
        
        output_dir = os.path.join(os.getcwd(), "outputs")
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, filename)

        pdf = SmartTourPDF()
        pdf.add_page()

        # Title
        if "title" in data:
            pdf.set_font("Arial", 'B', 14)
            pdf.set_text_color(99, 102, 241)
            title_text = pdf.safe_text(data.get("title", "Travel Plan"))
            pdf.cell(0, 10, title_text, ln=True, align="C")
            pdf.ln(3)

        # City ve Date
        pdf.set_font("Arial", 'B', 11)
        pdf.set_text_color(0, 0, 0)
        
        city = pdf.safe_text(data.get('city', 'N/A'))
        date = pdf.safe_text(data.get('date', 'N/A'))
        
        print(f"City: {city} (len: {len(city)})")
        print(f"Date: {date} (len: {len(date)})")
        
        pdf.cell(0, 8, f"City: {city}", ln=True)
        pdf.cell(0, 8, f"Date: {date}", ln=True)
        pdf.ln(5)

        # Itinerary
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(0, 51, 153)
        pdf.cell(0, 8, "Itinerary", ln=True)
        pdf.set_text_color(0, 0, 0)
        pdf.ln(2)
        
        pdf.set_font("Arial", size=10)
        plan_items = data.get("plan", [])
        
        if not isinstance(plan_items, list):
            plan_items = [plan_items] if plan_items else []
        
        print(f"Plan items: {len(plan_items)}")
        
        for i, item in enumerate(plan_items, 1):
            print(f"Processing plan item {i}: {len(str(item))} chars")
            pdf.add_wrapped_text(item, f"{i}. ")
            pdf.ln(1)

        pdf.ln(3)

        # Recommendations
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(204, 0, 0)
        pdf.cell(0, 8, "Recommendations", ln=True)
        pdf.set_text_color(0, 0, 0)
        pdf.ln(2)
        
        pdf.set_font("Arial", size=10)
        rec_items = data.get("recommendations", [])
        
        if not isinstance(rec_items, list):
            rec_items = [rec_items] if rec_items else []
        
        print(f"Recommendation items: {len(rec_items)}")
        
        for item in rec_items:
            print(f"Processing recommendation: {len(str(item))} chars")
            pdf.add_wrapped_text(item, "- ")
            pdf.ln(1)

        pdf.output(output_path)
        print(f"PDF successfully created: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"PDF ERROR: {str(e)}")
        print(f"Error type: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        raise